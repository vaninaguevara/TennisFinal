// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tennis.Repository;

#nullable disable

namespace Tennis.Migrations
{
    [DbContext(typeof(TennisContext))]
    [Migration("20240520214128_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tennis.Models.Entities.TorneoJugador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("JugadorId")
                        .HasColumnType("int")
                        .HasColumnName("JugadorId");

                    b.Property<int?>("JugadorId1")
                        .HasColumnType("int");

                    b.Property<int>("TorneoId")
                        .HasColumnType("int")
                        .HasColumnName("TorneoId");

                    b.Property<int?>("TorneoId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JugadorId");

                    b.HasIndex("JugadorId1");

                    b.HasIndex("TorneoId");

                    b.HasIndex("TorneoId1");

                    b.ToTable("TorneoJugador", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Jugador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("Activo");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Apellido");

                    b.Property<int>("Dni")
                        .HasColumnType("int")
                        .HasColumnName("Dni");

                    b.Property<int>("Fuerza")
                        .HasColumnType("int")
                        .HasColumnName("Fuerza");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Genero");

                    b.Property<int>("Habilidad")
                        .HasColumnType("int")
                        .HasColumnName("Habilidad");

                    b.Property<DateTime>("Nacimiento")
                        .HasColumnType("datetime2")
                        .HasColumnName("Nacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.Property<int>("Reaccion")
                        .HasColumnType("int")
                        .HasColumnName("Reaccion");

                    b.Property<int>("Suerte")
                        .HasColumnType("int")
                        .HasColumnName("Suerte");

                    b.Property<int>("Velocidad")
                        .HasColumnType("int")
                        .HasColumnName("Velocidad");

                    b.HasKey("Id");

                    b.ToTable("Jugador", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Partido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdJugadorL")
                        .HasColumnType("int")
                        .HasColumnName("IdJugadorL");

                    b.Property<int>("IdJugadorW")
                        .HasColumnType("int")
                        .HasColumnName("IdJugadorW");

                    b.Property<int>("IdTorneo")
                        .HasColumnType("int")
                        .HasColumnName("IdTorneo");

                    b.Property<int?>("TorneoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdJugadorL");

                    b.HasIndex("IdJugadorW");

                    b.HasIndex("IdTorneo");

                    b.HasIndex("TorneoId");

                    b.ToTable("Partido", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Torneo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserId");

                    b.Property<DateTime?>("FechaTermino")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaTermino");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Genero");

                    b.Property<int?>("IdJugadorW")
                        .HasColumnType("int");

                    b.Property<int?>("JugadorId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("IdJugadorW");

                    b.HasIndex("JugadorId");

                    b.ToTable("Torneo", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RefreshToken");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2")
                        .HasColumnName("RefreshTokenExpiration");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Entities.TorneoJugador", b =>
                {
                    b.HasOne("Tennis.Models.Jugador", null)
                        .WithMany("TorneoJugador")
                        .HasForeignKey("JugadorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Jugador");

                    b.HasOne("Tennis.Models.Jugador", "Jugador")
                        .WithMany()
                        .HasForeignKey("JugadorId1");

                    b.HasOne("Tennis.Models.Torneo", null)
                        .WithMany("TorneoJugador")
                        .HasForeignKey("TorneoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Torneo");

                    b.HasOne("Tennis.Models.Torneo", "Torneo")
                        .WithMany()
                        .HasForeignKey("TorneoId1");

                    b.Navigation("Jugador");

                    b.Navigation("Torneo");
                });

            modelBuilder.Entity("Tennis.Models.Partido", b =>
                {
                    b.HasOne("Tennis.Models.Jugador", "JugadorL")
                        .WithMany()
                        .HasForeignKey("IdJugadorL")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tennis.Models.Jugador", "JugadorW")
                        .WithMany()
                        .HasForeignKey("IdJugadorW")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tennis.Models.Torneo", "Torneo")
                        .WithMany()
                        .HasForeignKey("IdTorneo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tennis.Models.Torneo", null)
                        .WithMany("Partido")
                        .HasForeignKey("TorneoId");

                    b.Navigation("JugadorL");

                    b.Navigation("JugadorW");

                    b.Navigation("Torneo");
                });

            modelBuilder.Entity("Tennis.Models.Torneo", b =>
                {
                    b.HasOne("Tennis.Models.Jugador", "JugadorW")
                        .WithMany()
                        .HasForeignKey("IdJugadorW")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tennis.Models.Jugador", null)
                        .WithMany("Torneo")
                        .HasForeignKey("JugadorId");

                    b.Navigation("JugadorW");
                });

            modelBuilder.Entity("Tennis.Models.Jugador", b =>
                {
                    b.Navigation("Torneo");

                    b.Navigation("TorneoJugador");
                });

            modelBuilder.Entity("Tennis.Models.Torneo", b =>
                {
                    b.Navigation("Partido");

                    b.Navigation("TorneoJugador");
                });
#pragma warning restore 612, 618
        }
    }
}
